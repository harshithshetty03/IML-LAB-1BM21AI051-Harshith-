{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "source": [
        "# 1.Implement and demonstrate the FIND-S algorithm for finding the most specific\n",
        "#hypothesis based on a given set of training data samples. Read the training data from a\n",
        "#.CSV file.\n",
        "from google.colab import files\n",
        "\n",
        "\n",
        "uploaded = files.upload()\n",
        "\n",
        "import csv\n",
        "\n",
        "def find_s_algorithm(training_data):\n",
        "\n",
        "    hypothesis = training_data[0][:-1]\n",
        "\n",
        "    for example in training_data:\n",
        "        if example[-1] == 'Yes':\n",
        "            for i in range(len(hypothesis)):\n",
        "                if example[i] != hypothesis[i]:\n",
        "                    hypothesis[i] = '?'\n",
        "\n",
        "    return hypothesis\n",
        "\n",
        "def read_csv_file(file_path):\n",
        "    with open(file_path, 'r') as file:\n",
        "        reader = csv.reader(file)\n",
        "        data = [row for row in reader]\n",
        "\n",
        "    return data\n",
        "\n",
        "def main():\n",
        "    file_path = 'iris_csv.csv'\n",
        "    training_data = read_csv_file(file_path)\n",
        "\n",
        "\n",
        "    hypothesis = find_s_algorithm(training_data)\n",
        "\n",
        "\n",
        "    print(\"Final Hypothesis:\", hypothesis)\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    main()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 90
        },
        "id": "BDSVrNfGcFpv",
        "outputId": "308ed74f-b8c7-46a8-99f2-0b0a08361d87"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-06fe4616-be35-4aab-9cef-371ba8fa2870\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-06fe4616-be35-4aab-9cef-371ba8fa2870\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving iris_csv.csv to iris_csv (1).csv\n",
            "Final Hypothesis: ['sepallength', 'sepalwidth', 'petallength', 'petalwidth']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 2. For a given set of training data examples stored in a .CSV file, implement and demonstrate\n",
        "#the Candidate Elimination algorithm to output a description of the set of all hypothesis\n",
        "#consistent with the training examples.\n",
        "\n",
        "from google.colab import files\n",
        "\n",
        "\n",
        "uploaded = files.upload()\n",
        "\n",
        "import csv\n",
        "\n",
        "def initialize_hypotheses(attributes):\n",
        "    specific_hypothesis = ['0'] * len(attributes)\n",
        "    general_hypothesis = ['?'] * len(attributes)\n",
        "    return specific_hypothesis, general_hypothesis\n",
        "\n",
        "def is_consistent(hypothesis, example, is_positive):\n",
        "    for h, e in zip(hypothesis, example):\n",
        "        if h == '0' and e == '1':\n",
        "            return False\n",
        "        if h == '1' and e == '0':\n",
        "            return False\n",
        "    return is_positive\n",
        "\n",
        "def candidate_elimination(training_data):\n",
        "    attributes = training_data[0][:-1]\n",
        "    specific_hypothesis, general_hypothesis = initialize_hypotheses(attributes)\n",
        "\n",
        "    for example in training_data:\n",
        "        is_positive = example[-1] == 'Yes'\n",
        "\n",
        "        if is_positive:\n",
        "            for i in range(len(specific_hypothesis)):\n",
        "                if specific_hypothesis[i] == '0':\n",
        "                    specific_hypothesis[i] = example[i]\n",
        "                elif specific_hypothesis[i] != example[i]:\n",
        "                    specific_hypothesis[i] = '?'\n",
        "\n",
        "            for i in range(len(general_hypothesis)):\n",
        "                if specific_hypothesis[i] == '?':\n",
        "                    general_hypothesis[i] = '?'\n",
        "        else:\n",
        "            for i in range(len(specific_hypothesis)):\n",
        "                if specific_hypothesis[i] == example[i]:\n",
        "                    specific_hypothesis[i] = '?'\n",
        "\n",
        "            for i in range(len(general_hypothesis)):\n",
        "                if specific_hypothesis[i] == '?' and general_hypothesis[i] != example[i]:\n",
        "                    general_hypothesis[i] = example[i]\n",
        "\n",
        "    return specific_hypothesis, general_hypothesis\n",
        "\n",
        "def read_csv_file(file_path):\n",
        "    with open(file_path, 'r') as file:\n",
        "        reader = csv.reader(file)\n",
        "        data = [row for row in reader]\n",
        "\n",
        "    return data\n",
        "\n",
        "def main():\n",
        "\n",
        "    file_path = 'iris_csv.csv'\n",
        "    training_data = read_csv_file(file_path)\n",
        "\n",
        "\n",
        "    specific_hypothesis, general_hypothesis = candidate_elimination(training_data)\n",
        "\n",
        "\n",
        "    print(\"Specific Hypothesis:\", specific_hypothesis)\n",
        "    print(\"General Hypothesis:\", general_hypothesis)\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    main()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 107
        },
        "id": "AIa4B3fJc1hH",
        "outputId": "1b33c83c-17b4-4af3-c8a4-a4dc13e5abea"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-4fe55111-4e9e-40f8-8d68-9fee094837a6\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-4fe55111-4e9e-40f8-8d68-9fee094837a6\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving iris_csv.csv to iris_csv (4).csv\n",
            "Specific Hypothesis: ['0', '0', '0', '0']\n",
            "General Hypothesis: ['?', '?', '?', '?']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 3.Write a program to demonstrate the working of the decision tree based ID3 algorithm.\n",
        "#Use an appropriate data set for building the decision tree and apply this knowledge to\n",
        "#classify a new sample.\n",
        "\n",
        "\n",
        "import numpy as np\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import accuracy_score\n",
        "\n",
        "\n",
        "data = np.array([\n",
        "    [1, 0, 0, 'No'],\n",
        "    [1, 0, 1, 'Yes'],\n",
        "    [0, 1, 0, 'Yes'],\n",
        "    [0, 1, 1, 'No'],\n",
        "    [1, 1, 0, 'Yes']\n",
        "])\n",
        "\n",
        "\n",
        "X = data[:, :-1]\n",
        "y = data[:, -1]\n",
        "\n",
        "\n",
        "class_mapping = {'No': 0, 'Yes': 1}\n",
        "y_numeric = np.array([class_mapping[label] for label in y])\n",
        "\n",
        "\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y_numeric, test_size=0.2, random_state=42)\n",
        "\n",
        "decision_tree = DecisionTreeClassifier(criterion='entropy')\n",
        "decision_tree.fit(X_train, y_train)\n",
        "\n",
        "\n",
        "y_pred = decision_tree.predict(X_test)\n",
        "\n",
        "\n",
        "accuracy = accuracy_score(y_test, y_pred)\n",
        "print(f\"Accuracy: {accuracy:.2f}\")\n",
        "\n",
        "\n",
        "new_sample = np.array([[1, 0, 0]])\n",
        "predicted_class = decision_tree.predict(new_sample)\n",
        "predicted_label = list(class_mapping.keys())[predicted_class[0]]\n",
        "print(f\"Predicted Class: {predicted_label}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4LcwoAXvdxBv",
        "outputId": "bd2b1a1b-8329-43d5-e8f8-e053d0cdbff0"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy: 0.00\n",
            "Predicted Class: No\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 4 . Write a program to demonstrate the working of Support Vector Machine by using\n",
        "#appropriate data set.\n",
        "\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn import datasets\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.svm import SVC\n",
        "from sklearn.metrics import accuracy_score\n",
        "\n",
        "\n",
        "iris = datasets.load_iris()\n",
        "X = iris.data[:, :2]\n",
        "y = iris.target\n",
        "\n",
        "X = X[y != 2]\n",
        "y = y[y != 2]\n",
        "\n",
        "\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n",
        "\n",
        "svm_classifier = SVC(kernel='linear', C=1)\n",
        "svm_classifier.fit(X_train, y_train)\n",
        "\n",
        "plt.figure(figsize=(8, 6))\n",
        "h = .02\n",
        "xx, yy = np.meshgrid(np.arange(X[:, 0].min(), X[:, 0].max(), h),\n",
        "                     np.arange(X[:, 1].min(), X[:, 1].max(), h))\n",
        "\n",
        "Z = svm_classifier.decision_function(np.c_[xx.ravel(), yy.ravel()])\n",
        "Z = Z.reshape(xx.shape)\n",
        "\n",
        "plt.contour(xx, yy, Z, levels=[0], linewidths=2, colors='black')\n",
        "\n",
        "\n",
        "plt.scatter(X[:, 0], X[:, 1], c=y, cmap='viridis', edgecolor='k', marker='o', s=80, label='Data points')\n",
        "plt.scatter(svm_classifier.support_vectors_[:, 0], svm_classifier.support_vectors_[:, 1], s=100, facecolors='none',\n",
        "            edgecolors='k', marker='*', label='Support Vectors')\n",
        "\n",
        "plt.title('Support Vector Machine (SVM) - Iris Dataset')\n",
        "plt.xlabel('Sepal Length')\n",
        "plt.ylabel('Sepal Width')\n",
        "plt.legend()\n",
        "plt.show()\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 564
        },
        "id": "DVNsr7b3eDQZ",
        "outputId": "688f0c99-569c-408a-e0e4-499eeaac0bd3"
      },
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 5. Write a program to implement k- Nearest Neighbor algorithm to classify the iris data set.\n",
        "#Print both correct and wrong predictions. (Python ML library can be used for this\n",
        "#problem)\n",
        "\n",
        "\n",
        "from sklearn.datasets import load_iris\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "from sklearn.metrics import accuracy_score, classification_report\n",
        "\n",
        "iris = load_iris()\n",
        "X = iris.data\n",
        "y = iris.target\n",
        "\n",
        "\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n",
        "\n",
        "\n",
        "knn_classifier = KNeighborsClassifier(n_neighbors=3)\n",
        "knn_classifier.fit(X_train, y_train)\n",
        "\n",
        "\n",
        "y_pred = knn_classifier.predict(X_test)\n",
        "\n",
        "\n",
        "accuracy = accuracy_score(y_test, y_pred)\n",
        "print(f\"Accuracy: {accuracy:.2f}\")\n",
        "\n",
        "\n",
        "correct_predictions = X_test[y_test == y_pred]\n",
        "correct_labels = y_test[y_test == y_pred]\n",
        "print(\"\\nCorrect Predictions:\")\n",
        "for features, label in zip(correct_predictions, correct_labels):\n",
        "    print(f\"Features: {features}, Actual Label: {iris.target_names[label]}, Predicted Label: {iris.target_names[label]}\")\n",
        "\n",
        "\n",
        "wrong_predictions = X_test[y_test != y_pred]\n",
        "wrong_actual_labels = y_test[y_test != y_pred]\n",
        "wrong_predicted_labels = y_pred[y_test != y_pred]\n",
        "print(\"\\nWrong Predictions:\")\n",
        "for features, actual_label, predicted_label in zip(wrong_predictions, wrong_actual_labels, wrong_predicted_labels):\n",
        "    print(f\"Features: {features}, Actual Label: {iris.target_names[actual_label]}, Predicted Label: {iris.target_names[predicted_label]}\")\n",
        "\n",
        "\n",
        "print(\"\\nClassification Report:\")\n",
        "print(classification_report(y_test, y_pred, target_names=iris.target_names))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xXFBmp90cwiv",
        "outputId": "cc4fb679-5612-40c8-8a8d-471cbb525da7"
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy: 1.00\n",
            "\n",
            "Correct Predictions:\n",
            "Features: [6.1 2.8 4.7 1.2], Actual Label: versicolor, Predicted Label: versicolor\n",
            "Features: [5.7 3.8 1.7 0.3], Actual Label: setosa, Predicted Label: setosa\n",
            "Features: [7.7 2.6 6.9 2.3], Actual Label: virginica, Predicted Label: virginica\n",
            "Features: [6.  2.9 4.5 1.5], Actual Label: versicolor, Predicted Label: versicolor\n",
            "Features: [6.8 2.8 4.8 1.4], Actual Label: versicolor, Predicted Label: versicolor\n",
            "Features: [5.4 3.4 1.5 0.4], Actual Label: setosa, Predicted Label: setosa\n",
            "Features: [5.6 2.9 3.6 1.3], Actual Label: versicolor, Predicted Label: versicolor\n",
            "Features: [6.9 3.1 5.1 2.3], Actual Label: virginica, Predicted Label: virginica\n",
            "Features: [6.2 2.2 4.5 1.5], Actual Label: versicolor, Predicted Label: versicolor\n",
            "Features: [5.8 2.7 3.9 1.2], Actual Label: versicolor, Predicted Label: versicolor\n",
            "Features: [6.5 3.2 5.1 2. ], Actual Label: virginica, Predicted Label: virginica\n",
            "Features: [4.8 3.  1.4 0.1], Actual Label: setosa, Predicted Label: setosa\n",
            "Features: [5.5 3.5 1.3 0.2], Actual Label: setosa, Predicted Label: setosa\n",
            "Features: [4.9 3.1 1.5 0.1], Actual Label: setosa, Predicted Label: setosa\n",
            "Features: [5.1 3.8 1.5 0.3], Actual Label: setosa, Predicted Label: setosa\n",
            "Features: [6.3 3.3 4.7 1.6], Actual Label: versicolor, Predicted Label: versicolor\n",
            "Features: [6.5 3.  5.8 2.2], Actual Label: virginica, Predicted Label: virginica\n",
            "Features: [5.6 2.5 3.9 1.1], Actual Label: versicolor, Predicted Label: versicolor\n",
            "Features: [5.7 2.8 4.5 1.3], Actual Label: versicolor, Predicted Label: versicolor\n",
            "Features: [6.4 2.8 5.6 2.2], Actual Label: virginica, Predicted Label: virginica\n",
            "Features: [4.7 3.2 1.6 0.2], Actual Label: setosa, Predicted Label: setosa\n",
            "Features: [6.1 3.  4.9 1.8], Actual Label: virginica, Predicted Label: virginica\n",
            "Features: [5.  3.4 1.6 0.4], Actual Label: setosa, Predicted Label: setosa\n",
            "Features: [6.4 2.8 5.6 2.1], Actual Label: virginica, Predicted Label: virginica\n",
            "Features: [7.9 3.8 6.4 2. ], Actual Label: virginica, Predicted Label: virginica\n",
            "Features: [6.7 3.  5.2 2.3], Actual Label: virginica, Predicted Label: virginica\n",
            "Features: [6.7 2.5 5.8 1.8], Actual Label: virginica, Predicted Label: virginica\n",
            "Features: [6.8 3.2 5.9 2.3], Actual Label: virginica, Predicted Label: virginica\n",
            "Features: [4.8 3.  1.4 0.3], Actual Label: setosa, Predicted Label: setosa\n",
            "Features: [4.8 3.1 1.6 0.2], Actual Label: setosa, Predicted Label: setosa\n",
            "Features: [4.6 3.6 1.  0.2], Actual Label: setosa, Predicted Label: setosa\n",
            "Features: [5.7 4.4 1.5 0.4], Actual Label: setosa, Predicted Label: setosa\n",
            "Features: [6.7 3.1 4.4 1.4], Actual Label: versicolor, Predicted Label: versicolor\n",
            "Features: [4.8 3.4 1.6 0.2], Actual Label: setosa, Predicted Label: setosa\n",
            "Features: [4.4 3.2 1.3 0.2], Actual Label: setosa, Predicted Label: setosa\n",
            "Features: [6.3 2.5 5.  1.9], Actual Label: virginica, Predicted Label: virginica\n",
            "Features: [6.4 3.2 4.5 1.5], Actual Label: versicolor, Predicted Label: versicolor\n",
            "Features: [5.2 3.5 1.5 0.2], Actual Label: setosa, Predicted Label: setosa\n",
            "Features: [5.  3.6 1.4 0.2], Actual Label: setosa, Predicted Label: setosa\n",
            "Features: [5.2 4.1 1.5 0.1], Actual Label: setosa, Predicted Label: setosa\n",
            "Features: [5.8 2.7 5.1 1.9], Actual Label: virginica, Predicted Label: virginica\n",
            "Features: [6.  3.4 4.5 1.6], Actual Label: versicolor, Predicted Label: versicolor\n",
            "Features: [6.7 3.1 4.7 1.5], Actual Label: versicolor, Predicted Label: versicolor\n",
            "Features: [5.4 3.9 1.3 0.4], Actual Label: setosa, Predicted Label: setosa\n",
            "Features: [5.4 3.7 1.5 0.2], Actual Label: setosa, Predicted Label: setosa\n",
            "\n",
            "Wrong Predictions:\n",
            "\n",
            "Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "      setosa       1.00      1.00      1.00        19\n",
            "  versicolor       1.00      1.00      1.00        13\n",
            "   virginica       1.00      1.00      1.00        13\n",
            "\n",
            "    accuracy                           1.00        45\n",
            "   macro avg       1.00      1.00      1.00        45\n",
            "weighted avg       1.00      1.00      1.00        45\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bGi6ArE7aXPm",
        "outputId": "4941da59-7c85-457a-8183-65009305024e"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Iteration 1, Log Likelihood: 1.3563624554083655\n",
            "Iteration 2, Log Likelihood: 1.3667454958865246\n",
            "Iteration 3, Log Likelihood: 1.3789940506175928\n",
            "Iteration 4, Log Likelihood: 1.3918083077220915\n",
            "Iteration 5, Log Likelihood: 1.4032595227807887\n",
            "Iteration 6, Log Likelihood: 1.4119784153013828\n",
            "Iteration 7, Log Likelihood: 1.4177693178036934\n",
            "Iteration 8, Log Likelihood: 1.4212667099638874\n",
            "Iteration 9, Log Likelihood: 1.4232696073028253\n",
            "Iteration 10, Log Likelihood: 1.4243944286728485\n",
            "\n",
            "Final Means:\n",
            "[[7.20217724 7.95052854]\n",
            " [7.79566121 7.29485515]]\n",
            "\n",
            "Final Covariances:\n",
            "[array([[5.26146011, 5.96889922],\n",
            "       [5.96889922, 8.42687022]]), array([[8.13862164, 6.04448304],\n",
            "       [6.04448304, 5.6344061 ]])]\n",
            "\n",
            "Final Mixing Coefficients:\n",
            "[0.50344648 0.49655352]\n"
          ]
        }
      ],
      "source": [
        "# 6 Write a program to demonstrate the working of  EM algorithm.\n",
        "\n",
        "import numpy as np\n",
        "from scipy.stats import multivariate_normal\n",
        "\n",
        "def initialize_parameters(data, num_clusters):\n",
        "    np.random.seed(42)\n",
        "    return np.random.rand(num_clusters, data.shape[1]), [np.eye(data.shape[1])]*num_clusters, np.ones(num_clusters) / num_clusters\n",
        "\n",
        "def expectation(data, means, covariances, mixing_coefficients):\n",
        "    responsibilities = np.array([mixing_coefficients[k] * multivariate_normal.pdf(data, means[k], covariances[k]) for k in range(len(means))]).T\n",
        "    return responsibilities / responsibilities.sum(axis=1, keepdims=True)\n",
        "\n",
        "def maximization(data, responsibilities):\n",
        "    Nk = responsibilities.sum(axis=0)\n",
        "    means = np.dot(responsibilities.T, data) / Nk[:, None]\n",
        "    covariances = [np.dot((responsibilities[:, k, None] * (data - means[k])).T, (data - means[k])) / Nk[k] for k in range(len(Nk))]\n",
        "    mixing_coefficients = Nk / data.shape[0]\n",
        "    return means, covariances, mixing_coefficients\n",
        "\n",
        "def log_likelihood(data, means, covariances, mixing_coefficients):\n",
        "    return np.log(np.array([mixing_coefficients[k] * multivariate_normal.pdf(data, means[k], covariances[k]) for k in range(len(means))]).sum(axis=1)).sum()\n",
        "\n",
        "def em_algorithm(data, num_clusters, num_iterations):\n",
        "    means, covariances, mixing_coefficients = initialize_parameters(data, num_clusters)\n",
        "\n",
        "    for _ in range(num_iterations):\n",
        "        responsibilities = expectation(data, means, covariances, mixing_coefficients)\n",
        "        means, covariances, mixing_coefficients = maximization(data, responsibilities)\n",
        "\n",
        "        likelihood = log_likelihood(data, means, covariances, mixing_coefficients)\n",
        "        print(f\"Iteration {_ + 1}, Log Likelihood: {likelihood}\")\n",
        "\n",
        "    return means, covariances, mixing_coefficients\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    np.random.seed(42)\n",
        "    data1 = np.random.multivariate_normal([5, 5], [[1, 0.5], [0.5, 1]], 100)\n",
        "    data2 = np.random.multivariate_normal([10, 10], [[1, -0.5], [-0.5, 1]], 100)\n",
        "    data = np.vstack([data1, data2])\n",
        "\n",
        "    num_clusters, num_iterations = 2, 10\n",
        "    final_means, final_covariances, final_mixing_coefficients = em_algorithm(data, num_clusters, num_iterations)\n",
        "\n",
        "    print(\"\\nFinal Means:\")\n",
        "    print(final_means)\n",
        "    print(\"\\nFinal Covariances:\")\n",
        "    print(final_covariances)\n",
        "    print(\"\\nFinal Mixing Coefficients:\")\n",
        "    print(final_mixing_coefficients)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#7. Write a python program to implement Naive bayesian Classifier using any appropriate dataset.\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.naive_bayes import GaussianNB\n",
        "from sklearn import datasets\n",
        "from sklearn import metrics\n",
        "\n",
        "iris = datasets.load_iris()\n",
        "X = iris.data\n",
        "y = iris.target\n",
        "\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n",
        "\n",
        "naive_bayes_classifier = GaussianNB()\n",
        "\n",
        "naive_bayes_classifier.fit(X_train, y_train)\n",
        "\n",
        "y_pred = naive_bayes_classifier.predict(X_test)\n",
        "\n",
        "accuracy = metrics.accuracy_score(y_test, y_pred)\n",
        "print(f\"Accuracy: {accuracy:.2f}\")\n",
        "\n",
        "new_data_point = [[5.0, 3.5, 1.5, 0.2]]  # Example new data point from the Iris dataset\n",
        "predicted_class = naive_bayes_classifier.predict(new_data_point)\n",
        "print(f\"Predicted Class: {predicted_class[0]}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "txgUrDP0akqY",
        "outputId": "3293f4a0-d1db-48e2-82c1-80a70d6a1a52"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy: 0.98\n",
            "Predicted Class: 0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#8. Write a program to implement K means Clustering, demonstrate the working by considering appropriate dataset.\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.cluster import KMeans\n",
        "from sklearn import datasets\n",
        "from sklearn.decomposition import PCA\n",
        "\n",
        "\n",
        "iris = datasets.load_iris()\n",
        "X = iris.data\n",
        "y = iris.target\n",
        "pca = PCA(n_components=2)\n",
        "X_pca = pca.fit_transform(X)\n",
        "\n",
        "kmeans = KMeans(n_clusters=3, random_state=42)\n",
        "kmeans.fit(X_pca)\n",
        "labels = kmeans.labels_\n",
        "\n",
        "plt.scatter(X_pca[:, 0], X_pca[:, 1], c=labels, cmap='viridis', edgecolor='k')\n",
        "plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=200, c='red', marker='X', label='Centroids')\n",
        "plt.title('K-Means Clustering of Iris Dataset')\n",
        "plt.xlabel('Principal Component 1')\n",
        "plt.ylabel('Principal Component 2')\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 507
        },
        "id": "mV59nIFXammP",
        "outputId": "647d464c-c4ed-4290-b3e5-1728293639a0"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#9. Write a program to demonstrate the working of Apriori alogirthm.\n",
        "\n",
        "\n",
        "import pandas as pd\n",
        "from mlxtend.preprocessing import TransactionEncoder\n",
        "from mlxtend.frequent_patterns import apriori, association_rules\n",
        "import pandas as pd\n",
        "\n",
        "\n",
        "transactions = [\n",
        "    ['bread', 'milk', 'eggs'],\n",
        "    ['bread', 'butter'],\n",
        "    ['milk', 'butter'],\n",
        "    ['bread', 'milk', 'butter'],\n",
        "    ['bread', 'milk'],\n",
        "]\n",
        "\n",
        "\n",
        "te = TransactionEncoder()\n",
        "te_ary = te.fit(transactions).transform(transactions)\n",
        "df = pd.DataFrame(te_ary, columns=te.columns_)\n",
        "\n",
        "\n",
        "frequent_itemsets = apriori(df, min_support=0.4, use_colnames=True)\n",
        "\n",
        "rules = association_rules(frequent_itemsets, metric=\"confidence\", min_threshold=0.7)\n",
        "\n",
        "print(\"Frequent Itemsets:\")\n",
        "print(frequent_itemsets)\n",
        "\n",
        "print(\"\\nAssociation Rules:\")\n",
        "print(rules)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "AiKTFQZha8pX",
        "outputId": "8c0c5919-8d89-436b-94b4-c5c8a49eca5e"
      },
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Frequent Itemsets:\n",
            "   support         itemsets\n",
            "0      0.8          (bread)\n",
            "1      0.6         (butter)\n",
            "2      0.8           (milk)\n",
            "3      0.4  (butter, bread)\n",
            "4      0.6    (bread, milk)\n",
            "5      0.4   (butter, milk)\n",
            "\n",
            "Association Rules:\n",
            "  antecedents consequents  antecedent support  consequent support  support  \\\n",
            "0     (bread)      (milk)                 0.8                 0.8      0.6   \n",
            "1      (milk)     (bread)                 0.8                 0.8      0.6   \n",
            "\n",
            "   confidence    lift  leverage  conviction  zhangs_metric  \n",
            "0        0.75  0.9375     -0.04         0.8          -0.25  \n",
            "1        0.75  0.9375     -0.04         0.8          -0.25  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 10. Write a program to implement PCA by using appropriate datasets for the computation.\n",
        "\n",
        "\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.decomposition import PCA\n",
        "from sklearn import datasets\n",
        "\n",
        "iris = datasets.load_iris()\n",
        "X = iris.data\n",
        "y = iris.target\n",
        "\n",
        "\n",
        "X_standardized = (X - np.mean(X, axis=0)) / np.std(X, axis=0)\n",
        "\n",
        "\n",
        "pca = PCA(n_components=2)\n",
        "X_pca = pca.fit_transform(X_standardized)\n",
        "\n",
        "\n",
        "plt.figure(figsize=(8, 6))\n",
        "for i, c in zip(range(3), ['red', 'green', 'blue']):\n",
        "    plt.scatter(X_pca[y == i, 0], X_pca[y == i, 1], c=c, label=f'Class {i}')\n",
        "\n",
        "plt.title('PCA of Iris Dataset')\n",
        "plt.xlabel('Principal Component 1')\n",
        "plt.ylabel('Principal Component 2')\n",
        "plt.legend()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 564
        },
        "id": "ttclrI6ybqjX",
        "outputId": "b33bdb28-5248-406f-8e1f-d713506b8665"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    }
  ]
}